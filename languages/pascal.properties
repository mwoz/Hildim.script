# Define SciTE settings for Pascal files.
# Changed by Fernando Lozano <fsl@centroin.com.br> for Free Pascal
# Changed by Mathias Rauen <scite@madshi.net> for Delphi

filter.pascal=Pascal (dpr dpk pas dfm inc)|*.dpr;*.dpk;*.pas;*.dfm;*.inc;*.pp|

file.patterns.pascal=*.dpr;*.dpk;*.pas;*.dfm;*.inc;*.pp
lexer.$(file.patterns.pascal)=pascal

keywordclass.pascal=and array asm begin case cdecl class const constructor contains \
default destructor div do downto else end end. except exit exports external \
far file finalization finally for function goto if implementation in index inherited \
initialization inline interface label library message mod near nil not \
object of on or out overload override package packed pascal private procedure program \
property protected public published raise read record register repeat requires resourcestring \
safecall set shl shr stdcall stored string then threadvar to try type unit \
until uses var virtual while with write xor

keywordclass.pascalclasses=write read default public protected private property published stored

keywords.$(file.patterns.pascal)=$(keywordclass.pascal)
keywords2.$(file.patterns.pascal)=$(keywordclass.pascalclasses)

# Pascal styles
# White space
style.pascal.0=$(colour.whitespace)
# Comment
style.pascal.1=$(colour.comment)
# Line Comment
style.pascal.2=$(colour.comment)
# Doc comment
style.pascal.3=$(colour.code.comment.doc)
# Number
style.pascal.4=$(colour.number)

# Keyword
style.pascal.5=fore:#00007F,bold
# Double quoted string
style.pascal.6=fore:#7F007F,italics,$(font.comment)
# Single quoted string
style.pascal.7=$(colour.string)
# Symbols
style.pascal.8=fore:#007F7F
# Preprocessor
style.pascal.9=$(colour.preproc)
# Operators
style.pascal.10=$(colour.operator)
# Inline Asm
style.pascal.14=fore:#008080
# Default/Identifiers
style.pascal.32=
# Brace highlight
style.pascal.34=fore:#0000FF,notbold
# Brace incomplete highlight
style.pascal.35=fore:#FF0000,notbold
# Braces are only matched in operator style
braces.pascal.style=10

statement.indent.$(file.patterns.pascal)=5 case catch class default do else for then \
private protected public struct try union while type
statement.end.$(file.patterns.pascal)=10 ;
statement.lookback.$(file.patterns.pascal)=20
block.start.$(file.patterns.pascal)=10 begin
block.end.$(file.patterns.pascal)=10 end

comment.block.pascal=//
comment.stream.start.pascal=(*
comment.stream.end.pascal=*)

comment.box.start.pascal={
comment.box.middle.pascal=
comment.box.end.pascal=}

#using virtual pascal
#pc=C:\Vp21\Bin.w32\Vpc.exe -VC:\Vp21\Bin.w32\Vp.vpo "$(FilePath)"

#using free pascal

# compile
command.compile.*.pas=fpc "$(FilePath)"

# normal execute
if PLAT_WIN
	command.go.*.pas="$(FileName).exe"
	command.go.subsystem.*.pas=2
if PLAT_GTK
	command.go.*.pas="kvt -e $(FileName)"

# build
command.build.*.pas=fpc -B "$(FilePath)"
command.build.subsystem.*.pas=1

command.name.0.*.pas=Debug Compile
command.0.*.pas=fpc -g "$(FilePath)"
command.name.1.*.pas=Debug Build
command.1.*.pas=fpc -g -B "$(FilePath)"
command.name.2.*.pas=GDB
if PLAT_WIN
	command.2.*.pas=gdbpasw "$(FileName)"
if PLAT_GTK
	command.2.*.pas=gdb "$(FileName)"
	command.name.3.*.pas=DDD
	command.3.*.pas=ddd "$(FileName)"
functions.lpeg.pascal={{{
local rez = {}
    local IDENTIFIER = IDENTIFIER*(P'.'*IDENTIFIER)^0
    local STRING = P"'" *( ANY - (P"'"+NL) )^0 *(P"'"+NL) --NL == error'unfinished string')
    --^ there's no problem with pascal strings with double single quotes in the middle, like this:
    --  'first''second'
    --  in the loop, STRING just matches the 'first'-part, and then the 'second'.

    local multi1  = P'(*' *(1-P'*)')^0 * (P'*)' + EOF)--unfinished long comment
    local multi2  = P'{' *(1-P'}')^0 * (P'}' + EOF)--unfinished long comment
    local single = P'//' * (1 - NL)^0 * NL
    local COMMENT = multi1 + multi2 + single

    local SC = SPACE + COMMENT
    local IGNORED = SPACE + COMMENT + STRING

    -- define local patterns
    local f = AnyCase"function"
    local p = AnyCase"procedure"
    local c = AnyCase"constructor"
    local d = AnyCase"destructor"
    local restype = AZ^1
    -- create flags:
    -- f = Cg(f*Cc(true),'f')
    restype = Cg(C(restype),'')
    p = Cg(p*Cc(true),'p')
    c = Cg(c*Cc(true),'c')
    d = Cg(d*Cc(true),'d')
    -- create additional captures
    local I = C(IDENTIFIER)*cl
    -- definitions to capture:
    local procdef = Ct((p+c+d)*SC^1*I*SC^0*par^-1)
    local funcdef = Ct(f*SC^1*I*SC^0*par^-1*SC^0*P':'*SC^0*restype*SC^0*P';')
    -- resulting pattern, which does the work
    local patt = (procdef + funcdef + IGNORED^1 + IDENTIFIER + 1)^0 * EOF

    rez.pattern = Ct(patt)

rez.start_code = '^IMPLEMENTATION$'
return rez
}}}
